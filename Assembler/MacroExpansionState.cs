using Konamiman.Nestor80.Assembler.Output;

namespace Konamiman.Nestor80.Assembler
{
    /// <summary>
    /// Base class for the classes used to keep track of the macro expansions,
    /// there's one implementation of this class for each macro definition instruction.
    /// </summary>
    /// <remarks>
    /// For named macros, expansion mode starts when a source line is found whose opcode
    /// is the macro name. For repeat macros, expansion mode starts right after the ENDM
    /// instruction that completes the definition is found.
    /// </remarks>
    internal abstract class MacroExpansionState
    {
        public MacroExpansionState(LinesContainerLine expansionProcessedLine, string[] templateLines, int sourceLineNumber)
        {
            TemplateLines = templateLines;
            StartLineNumber = sourceLineNumber;
            ExpansionProcessedLine = expansionProcessedLine;
        }

        /// <summary>
        /// The source line that triggers the expansions
        /// (for named macros, the lien whose opcode is the macro name;
        /// for repeat macro, the REPT etc opcode).
        /// </summary>
        public LinesContainerLine ExpansionProcessedLine { get; init; }

        public MacroType MacroType { get; init; }

        /// <summary>
        /// The number of the source line that triggers the expansion.
        /// </summary>
        public int StartLineNumber { get; init; }

        /// <summary>
        /// The source lines that define the macro, with arguments
        /// replaced with {0}, {1}, etc.
        /// </summary>
        public string[] TemplateLines { get; init; }

        /// <summary>
        /// The line number of the last line that was retrieved with
        /// <see cref="GetNextSourceLine"/>, relative to the start of the macro expansion.
        /// </summary>
        public int RelativeLineNumber { get; protected set; }

        public int ActualLineNumber => StartLineNumber + RelativeLineNumber;

        /// <summary>
        /// The lines generated by the macro expansion once processed.
        /// </summary>
        public List<ProcessedSourceLine> ProcessedLines { get; } = new();

        /// <summary>
        /// Whether more source lines can be extracted by using <see cref="GetNextSourceLine"/>.
        /// </summary>
        public abstract bool HasMore { get; }

        /// <summary>
        /// Extract the next expanded source line.
        /// </summary>
        /// <returns></returns>
        public abstract string GetNextSourceLine();

        /// <summary>
        /// Finish the macro expansion.
        /// </summary>
        /// <param name="forceEnd">If true, discard remaining repetitions; if false, start over with the next repetition.</param>
        public abstract void Exit(bool forceEnd);
    }
}
